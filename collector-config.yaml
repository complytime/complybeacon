receivers:
  webhookevent:
    endpoint: 0.0.0.0:8088
    read_timeout: "500ms"
    path: "/eventsource/receiver"
    health_path: "/eventreceiver/healthcheck"
    split_logs_at_newline: false

  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  batch:
  truthbeam:
    endpoint: "http://compass:8081"
    tls:
      insecure: true
  # For logs that are received from or something similar filelog instead of OTLP.
  # These are expected to be in OCSF format before entering the pipeline.
  transform/ocsf:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          - merge_maps(log.attributes, ParseJSON(body), "upsert") where IsMatch(log.body, "^\\{")
          - set(log.attributes["evidence.id"], log.attributes["metadata"]["uid"])
          - set(log.attributes["policy.id"], log.attributes["policy"]["uid"])
          - set(log.attributes["policy.decision"], log.attributes["status"])
          - set(log.attributes["policy.source"], log.attributes["metadata"]["product"]["name"])
          - set(log.attributes["category.id"], log.attributes["category_uid"])
          - set(log.attributes["class.id"], log.attributes["class_uid"])
          - set(log.body, nil)
          # TODO: This would need to schems processor for failures and different OCSF versions
  transform/time:
    log_statements:
      - context: log
        statements:
          - set(log.observed_time, Now()) where log.observed_time_unix_nano == 0
          - set(log.time, log.observed_time) where log.time_unix_nano == 0

exporters:
  debug:
    verbosity: detailed
  otlphttp/logs:
    endpoint: "http://loki:3100/otlp"
    tls:
      insecure: true

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [debug]
    metrics:
      receivers: [ otlp ]
      processors: [ batch ]
      exporters: [ debug ]
    logs/webhook_pipeline:
      receivers: [ webhookevent ]
      processors: [ transform/ocsf, transform/time, truthbeam ]
      exporters: [ debug, otlphttp/logs ]
    logs/otlp_pipeline:
      receivers: [otlp]
      processors: [batch, transform/time, truthbeam]
      exporters: [debug, otlphttp/logs]
