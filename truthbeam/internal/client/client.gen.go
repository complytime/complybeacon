// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// Defines values for AssetCriticality.
const (
	Development     AssetCriticality = "development"
	MissionCritical AssetCriticality = "mission_critical"
	Production      AssetCriticality = "production"
	Sandbox         AssetCriticality = "sandbox"
	Staging         AssetCriticality = "staging"
)

// Defines values for Result.
const (
	Failed      Result = "Failed"
	NeedsReview Result = "Needs Review"
	Passed      Result = "Passed"
)

// Defines values for RiskLevel.
const (
	Critical RiskLevel = "critical"
	High     RiskLevel = "high"
	Low      RiskLevel = "low"
	Medium   RiskLevel = "medium"
)

// AssetCriticality The business criticality of the affected asset.
type AssetCriticality string

// Baseline Baselines impacted by policy.
type Baseline struct {
	// Id Baseline identifier (e.g., OpenSSF, PCI DSS).
	Id           string   `json:"id"`
	Requirements []string `json:"requirements"`
}

// EnrichmentRequest defines model for EnrichmentRequest.
type EnrichmentRequest struct {
	Evidence RawEvidence `json:"evidence"`

	// Summary A summary of the conformance assertion.
	Summary *string `json:"summary,omitempty"`
}

// EnrichmentResponse Enriched compliance finding with risk attributes and threat mappings.
type EnrichmentResponse struct {
	// Asset Attributes providing business context for the affected asset.
	Asset struct {
		// BusinessUnit The business unit that owns the asset (e.g., finance, marketing).
		BusinessUnit *string `json:"businessUnit,omitempty"`

		// Criticality The business criticality of the affected asset.
		Criticality *AssetCriticality `json:"criticality,omitempty"`

		// DataSensitivity The type of sensitive data at risk (e.g., PII, PHI).
		DataSensitivity *string `json:"dataSensitivity,omitempty"`
	} `json:"asset"`
	ImpactedBaselines []Baseline `json:"impactedBaselines"`

	// Result The possible outcomes of an evaluation or assessment.
	Result Result `json:"result"`

	// RiskAssessment Attributes from the Gemara logical model that quantify risk.
	RiskAssessment struct {
		// FindingType The type of compliance finding (e.g., policy_violation, misconfiguration).
		FindingType *string `json:"findingType,omitempty"`

		// OverallRiskScore A calculated, quantitative score for the overall risk (e.g., 8.2).
		OverallRiskScore *float32 `json:"overallRiskScore,omitempty"`

		// RiskLevel A categorical tag for the risk level, based on the overall risk score.
		RiskLevel *RiskLevel `json:"riskLevel,omitempty"`

		// Threat A detailed threat object from the Gemara logical model.
		Threat *Threat `json:"threat,omitempty"`
	} `json:"riskAssessment"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// RawEvidence defines model for RawEvidence.
type RawEvidence struct {
	// Decision The decision made by the policy engine (e.g., "compliant", "non-compliant").
	Decision string `json:"decision"`

	// Details Raw JSON output from the policy engine.
	Details json.RawMessage `json:"details"`

	// Id Unique identifier for the raw evidence.
	Id string `json:"id"`

	// PolicyId The ID of the policy that generated the evidence.
	PolicyId string   `json:"policyId"`
	Resource Resource `json:"resource"`

	// Source The source of the raw evidence (e.g., policy engine name).
	Source string `json:"source"`

	// Timestamp The time when the raw evidence was generated.
	Timestamp time.Time `json:"timestamp"`
}

// Resource defines model for Resource.
type Resource struct {
	// Digest A set of cryptographic digests for the resource.
	Digest string `json:"digest"`

	// Name The name of the resource.
	Name string `json:"name"`
}

// Result The possible outcomes of an evaluation or assessment.
type Result string

// RiskLevel A categorical tag for the risk level, based on the overall risk score.
type RiskLevel string

// Threat A detailed threat object from the Gemara logical model.
type Threat struct {
	// Description A detailed description of the threat.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the threat (e.g., CCC.TH01).
	Id            string           `json:"id"`
	MitreMappings *[]ThreatMapping `json:"mitreMappings,omitempty"`

	// Title A human-readable title for the threat (e.g., Access Control is Misconfigured).
	Title string `json:"title"`
}

// ThreatIdentifier A specific threat technique or sub-technique.
type ThreatIdentifier struct {
	// Id The MITRE ID (e.g., T1059.004).
	Id string `json:"id"`

	// Name The name of the technique.
	Name string `json:"name"`

	// Url The URL to the technique's page for more information.
	Url string `json:"url"`
}

// ThreatMapping A mapping to an external security framework, like MITRE ATT&CK.
type ThreatMapping struct {
	Identifiers []ThreatIdentifier `json:"identifiers"`

	// ReferenceId The name of the external reference (e.g., MITRE-ATT&CK).
	ReferenceId string `json:"referenceId"`
}

// PostV1EnrichJSONRequestBody defines body for PostV1Enrich for application/json ContentType.
type PostV1EnrichJSONRequestBody = EnrichmentRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostV1EnrichWithBody request with any body
	PostV1EnrichWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Enrich(ctx context.Context, body PostV1EnrichJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostV1EnrichWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrichRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Enrich(ctx context.Context, body PostV1EnrichJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrichRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostV1EnrichRequest calls the generic PostV1Enrich builder with application/json body
func NewPostV1EnrichRequest(server string, body PostV1EnrichJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EnrichRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1EnrichRequestWithBody generates requests for PostV1Enrich with any type of body
func NewPostV1EnrichRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrich")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostV1EnrichWithBodyWithResponse request with any body
	PostV1EnrichWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrichResponse, error)

	PostV1EnrichWithResponse(ctx context.Context, body PostV1EnrichJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrichResponse, error)
}

type PostV1EnrichResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrichmentResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostV1EnrichResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrichResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostV1EnrichWithBodyWithResponse request with arbitrary body returning *PostV1EnrichResponse
func (c *ClientWithResponses) PostV1EnrichWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrichResponse, error) {
	rsp, err := c.PostV1EnrichWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrichResponse(rsp)
}

func (c *ClientWithResponses) PostV1EnrichWithResponse(ctx context.Context, body PostV1EnrichJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrichResponse, error) {
	rsp, err := c.PostV1Enrich(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrichResponse(rsp)
}

// ParsePostV1EnrichResponse parses an HTTP response from a PostV1EnrichWithResponse call
func ParsePostV1EnrichResponse(rsp *http.Response) (*PostV1EnrichResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrichResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrichmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
