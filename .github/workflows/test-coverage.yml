---
# Test coverage workflow for ComplyBeacon
# Runs tests with coverage for all modules and enforces a
# minimum coverage threshold. Also runs SonarCloud analysis to
# check code quality and compliance.
#
# Features:
# - Tests all modules with coverage
# - Merges coverage profiles from all modules
# - Enforces minimum coverage threshold
# - Runs SonarCloud analysis for code quality and compliance

name: test-coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GOTOOLCHAIN: local
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 2

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: '1.25.x'

      - name: Install deps
        run: |
          set -euxo pipefail
          modules=$(git ls-files '**/go.mod' | grep -v '^vendor/' | sed 's#/go\.mod##' || true)
          if [ -z "$modules" ]; then
            echo "No Go modules found. Skipping dependency installation."
            exit 0
          fi
          for m in $modules; do
            echo "Processing module: $m"
            (cd "$m" 
            if [ ! -f "go.mod" ]; then
                echo "Error: go.mod not found in $m. Skipping."
                continue
            fi 
            go mod tidy
            go mod download
            )
          done
      
      - name: Generate coverage
        run: |
          set -euxo pipefail
          modules=$(git ls-files '**/go.mod' \
            | grep -v '^vendor/' | sed 's#/go\.mod##' || true)

          echo "Cleaning up existing coverage files..."
          for m in $modules; do
            (cd "$m" && rm -f coverage.out)
          done
          rm -f coverage.out

          # Generate coverage
          for m in $modules; do
            (
              cd "$m"
              echo "--- generating coverage for module: $m"
              if ! go test -v -covermode=atomic \
                  -coverprofile=coverage.out ./...; then
                echo "--- ERROR: go test failed for module: $m"
                exit 1
              fi
              go tool cover -func=coverage.out | tail -n1 || true
            )
          done
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"
          go install github.com/wadey/gocovmerge@latest
          # shellcheck disable=SC2086
          covs=$(find $modules -maxdepth 1 -type f \
            -name coverage.out -print)
          if [ -z "$covs" ]; then
            echo "No coverage files found; creating empty coverage.out"
            echo "mode: atomic" > coverage.out
          else
            # shellcheck disable=SC2086
            gocovmerge $covs > coverage.out
            echo "Coverage file: coverage.out"

            # Calculate coverage from merged file
            # Format: path:lines num_statements execution_count
            pct=$(awk '
              /^mode:/ { next }
              {
                statements += $2
                if ($3 > 0) covered += $2
              }
              END {
                if (statements > 0) {
                  coverage = 100.0 * covered / statements
                  printf "%.1f", coverage
                } else {
                  print "0.0"
                }
              }
            ' coverage.out)

            if [ -z "$pct" ]; then
              echo "No coverage calculated; treating as 0%."
              echo "COVERAGE_PCT=0" >> "$GITHUB_ENV"
            else
              echo "COVERAGE_PCT=$pct" >> "$GITHUB_ENV"
              echo "Total coverage: $pct%"
            fi
          fi

      - name: Enforce coverage threshold
        continue-on-error: true
        env:
          MIN_COVERAGE: "60.0"
        run: |
          awk -v cov="$COVERAGE_PCT" -v min="$MIN_COVERAGE" '
            BEGIN {
              printf "Total coverage: %.2f%% (minimum required: " \
                "%.2f%%)\n", cov, min;
              if (cov+0 < min+0) {
                printf "Coverage below threshold.\n";
                exit 1
              }
              else {
                printf "Coverage meets threshold.\n"
              }
            }'

      - name: Sonar Scan
        continue-on-error: true
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.qualitygate.wait=true
            -Dsonar.projectKey=rh-psce_complybeacon
            -Dsonar.organization=rh-psce
