// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Enrich(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Pz//NwAA//9+/eAthBcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
