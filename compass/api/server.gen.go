// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Enrich(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
