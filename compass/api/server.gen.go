// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Enrich(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
