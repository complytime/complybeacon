// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Enrich(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
