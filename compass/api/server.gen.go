// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Enrich(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
