// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Enrich(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RX3W/bNhD/Vw7cgDaArDjpNqB+a50W8NYuRuJuD3UeGOoss5FIlTzFNYr878NRH5Yq",
	"pc6+3iwfeR+/+90Hvwpl88IaNOTF7Kvwaou5DD/nNi8yLY1C/pJJoklbI7OlswU60ujFbCMzj5FI0Cun",
	"C5aLWeciJEhSZx42zuZwOb9+C9eoSqdpD3NryNkMls5udIaxiETR0fxV3KJR21y6O/7oW3jdiMC6oca5",
	"JJnZFHQiIkH7AsVMeHLapOIhEg4/l9ph3kTc1/zKe/SehdA9CAvWpQnzcGegtP5DOif3/O1JmkS6ZMTC",
	"O+0J7AZ0XkhFmIA6wHW49nRjh5ASMfvYDy/qgHgTCdKUYS9BB4Ds7SdUxOrfGKfVlhVc4ecSPbET/dTg",
	"vU6wJsaPDjdiJn44PRDptGbR6ZXcvWmOfutoq+PmiA++sMbjEMjqTB/AjTaJNinsNG3BaX8Hksjp25LQ",
	"gzQJ0NahJMhlUWiT+iHrVI/1bRK+F2UHznEqUHlUx3V1iu8HD/2Tra/C+fdVQEfpobqpr10bTYBz1g0T",
	"r2wylgk+DEEWiY11uSQxE9rQi/MDwbQhTNGx8hy9l+mjihrxoHgHsQSDzfGbh0h0CTdwPkGlfTD0rd3V",
	"lltVJYVcJgi3e6AtQmEzrfaAJtUG4TnGaRzBukWR1oI/jTWTzl8n8Vjf0cnQ7gejP5cI7DDpjUYHG+uC",
	"YSd30FTIqLrKs0UyHszigltMJwLaSoIUDTrJPYcl31Xv5O5Ckhxqv5I7+PX68newJRUlVZ19AFXcJcIn",
	"b82YDW9Lp3A8gErWBNFFo8lCPzVG5jiOO+kcPcm8GDfEYtht0QwN7aQ/QNaLKJGEE755lKPVDGpdaIPu",
	"JDA6EPOA+1hNXred5J8N4yv0ZUaDjjdGzHlvJlHpYXHBCKApczH7+CKaRmfRefTy5c1Yfddz5qjSjkbx",
	"wdwZu2MIltLz5PpTOsOIRuKt1JmIxCVt0XWAeQTxynhn2tWwjQBatc5FW30j6wD4ApXeaNVMDkK1rarW",
	"OvDl7aT9I34Sssy594vV1Ruu0ZrKq7Ppzy/j6fSncQYzt8cVsaSpkZ4fAx2ly8ZVfLh6B2T7Gp55KGSK",
	"oRnl1iFoU1FfWxM/jfLB58rszaPIN0NrBPZ6QLNr0gB+IXRGZuCbXW/jZI476+4iyPRdA+mr1WpdTqfn",
	"v8x/G8tGk+e/O1w7DBkZ8A436LhhPNaMu1lqI2lvNSQIEUw6EZwch7prOuoFOASd73IeR9BeLtq5c6jR",
	"CdnJsuqxz+fnyxO4RnevFcaw2moPvvqCwlnulx5UtX1PbqXH5LB2AbarXGUEM8yR3B4SSTJamwzv0cmU",
	"k80tJICT2FxqA5lNtarXNoT5+ZKtcTTPfHfp48aRYZJivDYLliXodWp4zFm4RVAyyzDhkS4NXBZoVq0P",
	"c5tlqMg61lh6sjmbUOg9u2pr59kRHwFf0cpHlUdOKvTxOky2Zq8+XzYowavlQkTiHl21cYhpfBZPmS62",
	"QCMLLWbiRTyNp0xTSdvAxNP7s9PKYlhebLV6f5MspbAgDxI8hnfEHe47oHbW3ZpX0vPBxUU7MZmOEZQe",
	"HSwuTjiYtXFIpTMeDoOlA/DEYRa2ho7yKsvWjOcsXptAEjRJYbUh0D4cNMm/TUoFOJd16EZccmJpPf1x",
	"Vj0HRFUg6Om1TfbVysqGA5KyKDKtwsXTsJS0D95jfWD4Jnro1yK5EsMf1WslpPN8Ov1fHKgfRMGDPjmu",
	"S8Uwbcos29fc7aVNhBsbyWvAf+ZZeCmMOFMa/FJgeOJifSYSvsxz6fbt822cuuH51qnwureElsGmHv4K",
	"AAD///8hlUa3EAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
