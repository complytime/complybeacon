// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Enrich(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RYW2/bOhL+KwPuAm0AWXHS3QXqt9ZpAe+2GyNxz3mogwOaGstsJFIlqbhGkf9+MKQk",
	"SxHTpOfyFpnDuXzzzYX5zoQuK61QOctm35kVOyy5/3Ouy6qQXAmkL55l0kmteLE0ukLjJFo22/LCYsIy",
	"tMLIis7ZrHcRMnRcFha2RpdwOb9+D9coaiPdAeZaOaMLWBq9lQWmLGFVT/N3tkEldiU3t/QxtPC2PQJt",
	"xhrn3PFC5yAzljB3qJDNmHVGqpzdJ0wEqbHS1Q7HujYoVQ54x4uaO4wqNPi1lgbLFsKh1jfWorV0CH1B",
	"WJAu6bD0d0ZKmx+4MfxA39ZxlXGTRSx8kNaB3oIsKy4cZiCO+B+vPd/YMaSMzT53eCW9hPT9eQDATcKc",
	"dAUOeHCETW++oHBk9J0yUuzo0hV+rdE6cm3IALyTGTb8+6fBLZuxf5we+XrakPX0iu/ftaIP3e903Dzh",
	"g620sjiGN8gMYd1KlREv9tLtwEh7C9w5Ize1QwtcZeB2BrmDkleVVLkdk1sMiqtLzY+i7MEZIQjhn0ke",
	"nH4Yw2UVShd6UiDVVpsy3IjQ2jru6iedug5S5JAP2T47nJWX/xgQegYLe1xqXItm1BhtxkwSOoulloTB",
	"nyUsgMFmTCr36vyIiFQOczSkvERref6oovZ4BOYoFm+wFb+5T1ifwWPnucNcm8NvMov0F2iPYXEBW23A",
	"8D1k3PHQbwPc0XBEwa19RCneUcfyEiCzn9OboZA2ykNqse0plDxD2BzA7RAqXUhxAFS5VAgvMc3TBNZd",
	"1t2a0afSatL76SSN8TYWzyclv9YIBLCTW4nGB0SGKai2RUTVBc8WWTyYxQV13l4Ebscd5KjQ0LjwJz9U",
	"b/j+gjs+1n7F9/Df68v/g65dVbswQUdQpX3ifrGPVLKujcB4AOGsDaKPRpuFYWoULzGOu5MlWsfLKm6I",
	"jmG/QzU2tOf2CNkgoow7nNDNJ2sqzPrOhS7oXgJ7xDziHush113n+2NLzxXaunCjlh8j5nwwql1tYXFB",
	"CKCqSzb7/CqZJmfJefL69U2s0JpB+6TSnkb2Sd0qvScIltzS9P6VG0WIJuw9lzTmL90OTQ+YRxAPxnvj",
	"voEtAmho9Yuu+mINx1Yo5FaKdnQ6FLtQtdqArTeT7of0WcgS5z4uVlfvqEYbKq/Opv9+nU6n/4ozmLgd",
	"V0QnbY0M/BjpqM0jm+Wnqw/g9FDDCwsVz9E3o1Ib7I/k9HmU9z4HszePIt8O2QjszYZCrnEF+M2hoT3B",
	"tnvw1vAS99rcJlDI2xbSN6vVup5Oz/8z/18sG22ef3YZ6DEkuuFs0VDDeKwZ97PURdLdakngI5j0Ijh5",
	"Guq+6WQQ4Bh0ukt5jKC9XHRz51ijE6cny9BjX87PlydwjeZOCkxhtZMWbPiCymjqlxaafXyy4Raz494J",
	"2O2ywQgWWKIzBz+zk7Uq8A4NzynZ1EI8OJkuuVRQ6FyKZm9FmJ8vyRpF88L2t15qHAVmOaZrtaCzDK3M",
	"FY05DRsEwYsCMxrpXMFlhWrV+TDXRYHCaUMaa+t0SSYEWkuu6sZ5csQmQFeksEnwyHCBNl37ydY+LM6X",
	"LUrwZrlgCbtDEzYONk3P0inRRVeoeCXZjL1Kp+mUaMrdzjPx9O7sNFj0y5YOb48HyRICK2eBg0X/vLrF",
	"Qw/U3r7f8IpbElxcdBOT6JhAbdHA4uKEglkrg642ysJxsPQAnhgs/NbQUx6y7Lf1SM7StfIkQZVVWioH",
	"0npBlf3ZpATAqax9N6KSY0tt3S9n4T3UPPvQurc6O4QVmwx7JHlVFVL4i6d+Ken+sfBUHxg/Cu+HtehM",
	"jf6H8Fzz6TyfTv8WB5oXofdgSI7rWhBM27ooDg13B2kLW/CW0xrwl3nmXzYRZ2qF3yr0L39sZBJm67Lk",
	"5tC9X+PU9e/XXoU3vcW3DDJ1/3sAAAD//7F+2SEfEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
