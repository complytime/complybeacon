// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"encoding/json"
	"time"
)

// Defines values for StatusId.
const (
	N0  StatusId = 0
	N1  StatusId = 1
	N2  StatusId = 2
	N3  StatusId = 3
	N99 StatusId = 99
)

// Defines values for StatusTitle.
const (
	Fail    StatusTitle = "Fail"
	Other   StatusTitle = "Other"
	Pass    StatusTitle = "Pass"
	Unknown StatusTitle = "Unknown"
	Warning StatusTitle = "Warning"
)

// Compliance Compliance details from OCSF Security Control Profile.
type Compliance struct {
	// Benchmark Benchmark or Security Control Catalog id
	Benchmark string `json:"benchmark"`

	// Control The Security Control being evaluated
	Control string `json:"control"`

	// Requirements Assessment requirements Id
	Requirements []string `json:"requirements"`

	// Standards List of impacted compliance standards
	Standards []string `json:"standards"`
}

// EnrichmentRequest defines model for EnrichmentRequest.
type EnrichmentRequest struct {
	Evidence RawEvidence `json:"evidence"`
}

// EnrichmentResponse Enriched compliance finding with risk attributes and threat mappings.
type EnrichmentResponse struct {
	Compliance []Compliance `json:"compliance"`

	// Remediation Optional remediation information
	Remediation *string `json:"remediation,omitempty"`

	// Status Compliance Result
	Status  Status           `json:"status"`
	Threats *[]ThreatMapping `json:"threats,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// RawEvidence defines model for RawEvidence.
type RawEvidence struct {
	// CategoryId A category ID for raw data OCSF schema
	CategoryId *int `json:"category_id,omitempty"`

	// ClassId A event class id for raw data OCSF schema
	ClassId *int `json:"class_id,omitempty"`

	// Decision The decision made by the policy engine (e.g., "compliant", "non-compliant").
	Decision string `json:"decision"`

	// Id Unique identifier for the raw evidence.
	Id string `json:"id"`

	// PolicyId The ID of the policy that generated the evidence.
	PolicyId string `json:"policyId"`

	// RawData Raw JSON output from the policy engine.
	RawData json.RawMessage `json:"rawData"`

	// Source The source of the raw evidence (e.g., policy engine name).
	Source string `json:"source"`

	// Timestamp The time when the raw evidence was generated.
	Timestamp time.Time `json:"timestamp"`
}

// Status Compliance Result
type Status struct {
	// Id Compliance status ID.
	Id *StatusId `json:"id,omitempty"`

	// Title Compliance status.
	Title StatusTitle `json:"title"`
}

// StatusId Compliance status ID.
type StatusId int

// StatusTitle Compliance status.
type StatusTitle string

// ThreatIdentifier A specific threat technique or sub-technique.
type ThreatIdentifier struct {
	// Id The MITRE ID (e.g., T1059.004).
	Id string `json:"id"`

	// Name The name of the technique.
	Name string `json:"name"`

	// Url The URL to the technique's page for more information.
	Url string `json:"url"`
}

// ThreatMapping A mapping to an external security framework, like MITRE ATT&CK.
type ThreatMapping struct {
	Identifiers []ThreatIdentifier `json:"identifiers"`

	// ReferenceId The name of the external reference (e.g., MITRE-ATT&CK).
	ReferenceId string `json:"referenceId"`
}

// PostV1EnrichJSONRequestBody defines body for PostV1Enrich for application/json ContentType.
type PostV1EnrichJSONRequestBody = EnrichmentRequest
